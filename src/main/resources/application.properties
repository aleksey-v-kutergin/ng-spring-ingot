# Активация консоли H2
# В случае со Spring Boot это делается по дефолту
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2

# Datasource
jdbc.datasource.url=jdbc:h2:mem:ngSpringIngotDB;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
jdbc.datasource.driverClassName=org.h2.Driver
jdbc.datasource.username=sa
jdbc.datasource.password=sa

# For traditional relational db
# jdbc.datasource.url=jdbc:postgresql://server_ip:server:port/dbName
# jdbc.datasource.driverClassName=org.postgresql.Driver
# jdbc.datasource.username=sa
# jdbc.datasource.password=sa

# JPA
# Возможные занчения параметра hibernate.ddl-auto:
# validate - происходит валидация схемы данных, не делает никаких изменений в бд
# update - обновляет схему данных
# create - создает схему данных, сноит предыдущую
# create-drop - грохает схему данных когда бин SessionFactory останавливает свою работу явно
#               Обычно когда приложение завершает свою работу
jpa.hibernate.hbm2ddl.auto=create-drop
#spring.jpa.hibernate.ddl-auto=update
jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
jpa.hibernate.maxFetchDepth=1
jpa.hibernate.showSQL=true

# Security setup
jwt.auth.header.name=Authorization
jwt.token.scheme=Bearer
# Ключ шифрования токена
jwt.token.secret=mySecret
# Время жизни токена в минутах
jwt.token.expiration=15

#API specification
rest.api.route.root=/api

# Authentication part
rest.api.route.auth=/api/auth
rest.api.route.auth.salt=/api/auth/salt
rest.api.route.auth.login=/api/auth/login
rest.api.route.auth.refresh=/api/auth/refresh